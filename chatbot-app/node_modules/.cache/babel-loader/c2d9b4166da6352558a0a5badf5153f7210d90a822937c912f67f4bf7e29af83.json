{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"product-list\"\n};\nconst _hoisted_2 = {\n  class: \"product-grid\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ProductCard = _resolveComponent(\"ProductCard\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.products, product => {\n    return _openBlock(), _createBlock(_component_ProductCard, {\n      key: product._id,\n      product: product,\n      onAddToCart: $options.handleAddToCart\n    }, null, 8 /* PROPS */, [\"product\", \"onAddToCart\"]);\n  }), 128 /* KEYED_FRAGMENT */))]), !$data.products.length ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"No products found.\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","products","product","_createBlock","_component_ProductCard","_id","onAddToCart","$options","handleAddToCart","length","_hoisted_3","_createCommentVNode"],"sources":["C:\\Users\\sigmaa\\Desktop\\E-Commerce\\E-commerce-Website\\chatbot-app\\src\\ProductList.vue"],"sourcesContent":["<template>\r\n  <div class=\"product-list\">\r\n    <div class=\"product-grid\">\r\n      <ProductCard\r\n        v-for=\"product in products\"\r\n        :key=\"product._id\"\r\n        :product=\"product\"\r\n        @add-to-cart=\"handleAddToCart\"\r\n      />\r\n    </div>\r\n    <p v-if=\"!products.length\">No products found.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ProductCard from \"./ProductCard.vue\";\r\n\r\nexport default {\r\n  components: { ProductCard },\r\n  data() {\r\n    return {\r\n      products: [],\r\n    };\r\n  },\r\n  methods: {\r\n    handleAddToCart(product) {\r\n      console.log(\"Product added:\", product);\r\n    },\r\n    updateProducts(newProducts) {\r\n      this.products = newProducts;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.product-list {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n.product-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); /* Adjust minmax as needed */\r\n  gap: 20px; /* Adjust gap as needed */\r\n  padding: 20px; /* Adjust padding as needed */\r\n}\r\n\r\n/* Optional: Style the ProductCard to fit nicely in the grid */\r\n.product-card { /* Or whatever your ProductCard class is */\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  text-align: center;\r\n  /* Add any other styles to make it look good in the grid */\r\n}\r\n\r\n/* Example media query for smaller screens (optional) */\r\n@media (max-width: 768px) {\r\n  .product-grid {\r\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Adjust for smaller screens */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAc;;EAF7BC,GAAA;AAAA;;;uBACEC,mBAAA,CAUM,OAVNC,UAUM,GATJC,mBAAA,CAOM,OAPNC,UAOM,I,kBANJH,mBAAA,CAKEI,SAAA,QARRC,WAAA,CAI0BC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBADhBC,YAAA,CAKEC,sBAAA;MAHCX,GAAG,EAAES,OAAO,CAACG,GAAG;MAChBH,OAAO,EAAEA,OAAO;MAChBI,WAAW,EAAEC,QAAA,CAAAC;;qCAGRR,KAAA,CAAAC,QAAQ,CAACQ,MAAM,I,cAAzBf,mBAAA,CAAiD,KAVrDgB,UAAA,EAU+B,oBAAkB,KAVjDC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}