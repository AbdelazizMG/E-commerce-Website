{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      userInput: \"\",\n      // User's chat input\n      chatHistory: [],\n      // Chat history\n      products: [] // List of products fetched from web scraping\n    };\n  },\n  methods: {\n    async sendMessage() {\n      if (!this.userInput.trim()) return;\n\n      // Add user's message to chat history\n      this.chatHistory.push({\n        sender: \"user\",\n        text: this.userInput\n      });\n\n      // Call your web scraping function here\n      const query = this.userInput;\n      this.userInput = \"\"; // Clear input box\n\n      // Simulate a bot response (replace this with your web scraping logic)\n      this.chatHistory.push({\n        sender: \"bot\",\n        text: `Searching for \"${query}\"...`\n      });\n\n      // Fetch products (replace this with your web scraping logic)\n      const products = await this.fetchProducts(query);\n      this.products = products;\n    },\n    async fetchProducts(query) {\n      try {\n        const response = await fetch(`http://localhost:5000/search?query=${query}`);\n        const products = await response.json();\n        return products;\n      } catch (error) {\n        console.error(\"Error fetching products:\", error);\n        return []; // Return an empty array in case of error\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","userInput","chatHistory","products","methods","sendMessage","trim","push","sender","text","query","fetchProducts","response","fetch","json","error","console"],"sources":["C:\\Users\\sigmaa\\Desktop\\E-Commerce\\E-commerce-Website\\chatbot-app\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <!-- Chatbot Container -->\r\n    <div class=\"chatbot-container\">\r\n      <!-- Chat Window -->\r\n      <div class=\"chat-window\">\r\n        <div v-for=\"(message, index) in chatHistory\" :key=\"index\" :class=\"['message', message.sender]\">\r\n          {{ message.text }}\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Chat Input -->\r\n      <div class=\"chat-input\">\r\n        <input v-model=\"userInput\" @keyup.enter=\"sendMessage\" placeholder=\"Type your query...\" />\r\n        <button @click=\"sendMessage\">Send</button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Product Side Panel -->\r\n    <div class=\"side-panel\">\r\n      <h3>Products</h3>\r\n      <div v-if=\"products && products.length > 0\">\r\n        <div v-for=\"(product, index) in products\" :key=\"index\" class=\"product\">\r\n          <img :src=\"product.image\" alt=\"Product Image\" />\r\n          <p>{{ product.name }}</p>\r\n          <p>{{ product.price }}</p>\r\n        </div>\r\n      </div>\r\n      <div v-else>\r\n        <p>No products found. Try searching!</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      userInput: \"\", // User's chat input\r\n      chatHistory: [], // Chat history\r\n      products: [], // List of products fetched from web scraping\r\n    };\r\n  },\r\n  methods: {\r\n    async sendMessage() {\r\n      if (!this.userInput.trim()) return;\r\n\r\n      // Add user's message to chat history\r\n      this.chatHistory.push({ sender: \"user\", text: this.userInput });\r\n\r\n      // Call your web scraping function here\r\n      const query = this.userInput;\r\n      this.userInput = \"\"; // Clear input box\r\n\r\n      // Simulate a bot response (replace this with your web scraping logic)\r\n      this.chatHistory.push({ sender: \"bot\", text: `Searching for \"${query}\"...` });\r\n\r\n      // Fetch products (replace this with your web scraping logic)\r\n      const products = await this.fetchProducts(query);\r\n      this.products = products;\r\n    },\r\n    async fetchProducts(query) {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/search?query=${query}`);\r\n        const products = await response.json();\r\n        return products;\r\n      } catch (error) {\r\n        console.error(\"Error fetching products:\", error);\r\n        return []; // Return an empty array in case of error\r\n      }\r\n    }\r\n\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n#app {\r\n  display: flex;\r\n  height: 100vh;\r\n  font-family: Arial, sans-serif;\r\n}\r\n\r\n.chatbot-container {\r\n  flex: 3;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-right: 1px solid #ccc;\r\n}\r\n\r\n.chat-window {\r\n  flex: 1;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n\r\n.message {\r\n  margin: 5px 0;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  max-width: 70%;\r\n}\r\n\r\n.message.user {\r\n  background-color: #e1ffc7;\r\n  align-self: flex-end;\r\n}\r\n\r\n.message.bot {\r\n  background-color: #f1f1f1;\r\n  align-self: flex-start;\r\n}\r\n\r\n.chat-input {\r\n  display: flex;\r\n  padding: 10px;\r\n}\r\n\r\n.chat-input input {\r\n  flex: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n}\r\n\r\n.chat-input button {\r\n  margin-left: 10px;\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.side-panel {\r\n  flex: 1;\r\n  padding: 10px;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.product {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.product img {\r\n  width: 100%;\r\n  height: auto;\r\n  border-radius: 5px;\r\n}\r\n\r\n.product p {\r\n  margin: 5px 0;\r\n}\r\n</style>"],"mappings":";AAoCA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MAAE;MACfC,WAAW,EAAE,EAAE;MAAE;MACjBC,QAAQ,EAAE,EAAE,CAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,CAAC,IAAI,CAACJ,SAAS,CAACK,IAAI,CAAC,CAAC,EAAE;;MAE5B;MACA,IAAI,CAACJ,WAAW,CAACK,IAAI,CAAC;QAAEC,MAAM,EAAE,MAAM;QAAEC,IAAI,EAAE,IAAI,CAACR;MAAU,CAAC,CAAC;;MAE/D;MACA,MAAMS,KAAI,GAAI,IAAI,CAACT,SAAS;MAC5B,IAAI,CAACA,SAAQ,GAAI,EAAE,EAAE;;MAErB;MACA,IAAI,CAACC,WAAW,CAACK,IAAI,CAAC;QAAEC,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAE,kBAAkBC,KAAK;MAAO,CAAC,CAAC;;MAE7E;MACA,MAAMP,QAAO,GAAI,MAAM,IAAI,CAACQ,aAAa,CAACD,KAAK,CAAC;MAChD,IAAI,CAACP,QAAO,GAAIA,QAAQ;IAC1B,CAAC;IACD,MAAMQ,aAAaA,CAACD,KAAK,EAAE;MACzB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,sCAAsCH,KAAK,EAAE,CAAC;QAC3E,MAAMP,QAAO,GAAI,MAAMS,QAAQ,CAACE,IAAI,CAAC,CAAC;QACtC,OAAOX,QAAQ;MACjB,EAAE,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,OAAO,EAAE,EAAE;MACb;IACF;EAEF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}